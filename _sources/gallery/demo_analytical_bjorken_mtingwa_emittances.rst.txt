
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/demo_analytical_bjorken_mtingwa_emittances.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_demo_analytical_bjorken_mtingwa_emittances.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_demo_analytical_bjorken_mtingwa_emittances.py:


.. _demo-analytical-bjorken-mtingwa:

===========================================================================
Bjorken-Mtingwa Formalism - Analytical Growth Rates and Emittance Evolution
===========================================================================

This example shows how to use the `~.xibs.analytical.BjorkenMtingwaIBS` class
to calculate IBS growth rates and emittances evolutions analytically.

We will demonstrate using the case of the CERN SPS, with protons at top
energy, aka 450 GeV.

.. GENERATED FROM PYTHON SOURCE LINES 15-47

.. code-block:: Python

    import logging
    import warnings

    from dataclasses import dataclass

    import matplotlib.pyplot as plt
    import numpy as np
    import xpart as xp
    import xtrack as xt

    from xibs.analytical import BjorkenMtingwaIBS
    from xibs.inputs import BeamParameters, OpticsParameters

    warnings.simplefilter("ignore")  # for this tutorial's clarity
    logging.basicConfig(
        level=logging.WARNING,
        format="[%(asctime)s] [%(levelname)s] - %(module)s.%(funcName)s:%(lineno)d - %(message)s",
        datefmt="%H:%M:%S",
    )
    plt.rcParams.update(
        {
            "font.family": "serif",
            "font.size": 20,
            "axes.titlesize": 20,
            "axes.labelsize": 20,
            "xtick.labelsize": 20,
            "ytick.labelsize": 20,
            "legend.fontsize": 15,
            "figure.titlesize": 20,
        }
    )








.. GENERATED FROM PYTHON SOURCE LINES 49-51

Let's start by defining the line and particle information, as well as some
parameters for later use:

.. GENERATED FROM PYTHON SOURCE LINES 51-65

.. code-block:: Python


    line_file = "lines/sps_top_protons.json"
    harmonic_number = 4653
    cavity_name = "actcse.31632"  # from xsuite documentation examples
    cavity_lag = 180  # from xsuite documentation examples
    rf_frequency = 200e6  # from xsuite documentation examples
    rf_voltage = 4  # in MV,  from xsuite documentation examples
    energy_loss = 0  # let's pretend ;)
    bunch_intensity = 1.2e11
    sigma_z = 22.5e-2  # from xsuite documentation examples
    nemitt_x = 2e-6  # from xsuite documentation examples
    nemitt_y = 2.5e-6  # from xsuite documentation examples
    n_part = int(5e3)  # for this example let's not use too many particles








.. GENERATED FROM PYTHON SOURCE LINES 66-70

Setting up line and particles
-----------------------------
Let's start by loading the `xtrack.Line`, activating RF cavities and
generating a matched Gaussian bunch:

.. GENERATED FROM PYTHON SOURCE LINES 70-91

.. code-block:: Python


    line = xt.Line.from_json(line_file)
    line.build_tracker()  # The line.particle_ref is included in the file

    # ----- Power accelerating cavity - from xsuite documentation examples ----- #
    line[cavity_name].voltage = rf_voltage * 1e6  # to be given in [V] here
    line[cavity_name].lag = cavity_lag
    line[cavity_name].frequency = rf_frequency
    twiss = line.twiss()

    particles = xp.generate_matched_gaussian_bunch(
        num_particles=n_part,
        total_intensity_particles=bunch_intensity,
        nemitt_x=nemitt_x,
        nemitt_y=nemitt_y,
        sigma_z=sigma_z,
        particle_ref=line.particle_ref,
        line=line,
        engine="single-rf-harmonic",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading line from dict:   0%|          | 0/9866 [00:00<?, ?it/s]    Loading line from dict:  28%|██▊       | 2755/9866 [00:00<00:00, 27532.57it/s]    Loading line from dict:  56%|█████▌    | 5509/9866 [00:00<00:00, 27329.12it/s]    Loading line from dict:  85%|████████▍ | 8378/9866 [00:00<00:00, 27941.65it/s]    Loading line from dict: 100%|██████████| 9866/9866 [00:00<00:00, 27847.62it/s]
    Done loading line from dict.           
    Compiling ContextCpu kernels...
    Done compiling ContextCpu kernels.
    SingleRFHarmonicMatcher: Gaussian parameter is equal to 0.226m to achieve target RMS bunch length (0.225m).
    SingleRFHarmonicMatcher: Transforming distribution:  0%      SingleRFHarmonicMatcher: Transforming distribution:  1%      SingleRFHarmonicMatcher: Transforming distribution:  1%      SingleRFHarmonicMatcher: Transforming distribution:  2%      SingleRFHarmonicMatcher: Transforming distribution:  3%      SingleRFHarmonicMatcher: Transforming distribution:  3%      SingleRFHarmonicMatcher: Transforming distribution:  4%      SingleRFHarmonicMatcher: Transforming distribution:  5%      SingleRFHarmonicMatcher: Transforming distribution:  5%      SingleRFHarmonicMatcher: Transforming distribution:  6%      SingleRFHarmonicMatcher: Transforming distribution:  7%      SingleRFHarmonicMatcher: Transforming distribution:  7%      SingleRFHarmonicMatcher: Transforming distribution:  8%      SingleRFHarmonicMatcher: Transforming distribution:  9%      SingleRFHarmonicMatcher: Transforming distribution:  9%      SingleRFHarmonicMatcher: Transforming distribution: 10%      SingleRFHarmonicMatcher: Transforming distribution: 11%      SingleRFHarmonicMatcher: Transforming distribution: 11%      SingleRFHarmonicMatcher: Transforming distribution: 12%      SingleRFHarmonicMatcher: Transforming distribution: 13%      SingleRFHarmonicMatcher: Transforming distribution: 13%      SingleRFHarmonicMatcher: Transforming distribution: 14%      SingleRFHarmonicMatcher: Transforming distribution: 15%      SingleRFHarmonicMatcher: Transforming distribution: 15%      SingleRFHarmonicMatcher: Transforming distribution: 16%      SingleRFHarmonicMatcher: Transforming distribution: 17%      SingleRFHarmonicMatcher: Transforming distribution: 17%      SingleRFHarmonicMatcher: Transforming distribution: 18%      SingleRFHarmonicMatcher: Transforming distribution: 19%      SingleRFHarmonicMatcher: Transforming distribution: 19%      SingleRFHarmonicMatcher: Transforming distribution: 20%      SingleRFHarmonicMatcher: Transforming distribution: 21%      SingleRFHarmonicMatcher: Transforming distribution: 21%      SingleRFHarmonicMatcher: Transforming distribution: 22%      SingleRFHarmonicMatcher: Transforming distribution: 23%      SingleRFHarmonicMatcher: Transforming distribution: 23%      SingleRFHarmonicMatcher: Transforming distribution: 24%      SingleRFHarmonicMatcher: Transforming distribution: 25%      SingleRFHarmonicMatcher: Transforming distribution: 25%      SingleRFHarmonicMatcher: Transforming distribution: 26%      SingleRFHarmonicMatcher: Transforming distribution: 27%      SingleRFHarmonicMatcher: Transforming distribution: 27%      SingleRFHarmonicMatcher: Transforming distribution: 28%      SingleRFHarmonicMatcher: Transforming distribution: 29%      SingleRFHarmonicMatcher: Transforming distribution: 29%      SingleRFHarmonicMatcher: Transforming distribution: 30%      SingleRFHarmonicMatcher: Transforming distribution: 31%      SingleRFHarmonicMatcher: Transforming distribution: 31%      SingleRFHarmonicMatcher: Transforming distribution: 32%      SingleRFHarmonicMatcher: Transforming distribution: 33%      SingleRFHarmonicMatcher: Transforming distribution: 33%      SingleRFHarmonicMatcher: Transforming distribution: 34%      SingleRFHarmonicMatcher: Transforming distribution: 35%      SingleRFHarmonicMatcher: Transforming distribution: 35%      SingleRFHarmonicMatcher: Transforming distribution: 36%      SingleRFHarmonicMatcher: Transforming distribution: 37%      SingleRFHarmonicMatcher: Transforming distribution: 37%      SingleRFHarmonicMatcher: Transforming distribution: 38%      SingleRFHarmonicMatcher: Transforming distribution: 39%      SingleRFHarmonicMatcher: Transforming distribution: 39%      SingleRFHarmonicMatcher: Transforming distribution: 40%      SingleRFHarmonicMatcher: Transforming distribution: 41%      SingleRFHarmonicMatcher: Transforming distribution: 41%      SingleRFHarmonicMatcher: Transforming distribution: 42%      SingleRFHarmonicMatcher: Transforming distribution: 43%      SingleRFHarmonicMatcher: Transforming distribution: 43%      SingleRFHarmonicMatcher: Transforming distribution: 44%      SingleRFHarmonicMatcher: Transforming distribution: 45%      SingleRFHarmonicMatcher: Transforming distribution: 45%      SingleRFHarmonicMatcher: Transforming distribution: 46%      SingleRFHarmonicMatcher: Transforming distribution: 47%      SingleRFHarmonicMatcher: Transforming distribution: 47%      SingleRFHarmonicMatcher: Transforming distribution: 48%      SingleRFHarmonicMatcher: Transforming distribution: 49%      SingleRFHarmonicMatcher: Transforming distribution: 49%      SingleRFHarmonicMatcher: Transforming distribution: 50%      SingleRFHarmonicMatcher: Transforming distribution: 51%      SingleRFHarmonicMatcher: Transforming distribution: 51%      SingleRFHarmonicMatcher: Transforming distribution: 52%      SingleRFHarmonicMatcher: Transforming distribution: 53%      SingleRFHarmonicMatcher: Transforming distribution: 53%      SingleRFHarmonicMatcher: Transforming distribution: 54%      SingleRFHarmonicMatcher: Transforming distribution: 55%      SingleRFHarmonicMatcher: Transforming distribution: 55%      SingleRFHarmonicMatcher: Transforming distribution: 56%      SingleRFHarmonicMatcher: Transforming distribution: 57%      SingleRFHarmonicMatcher: Transforming distribution: 57%      SingleRFHarmonicMatcher: Transforming distribution: 58%      SingleRFHarmonicMatcher: Transforming distribution: 59%      SingleRFHarmonicMatcher: Transforming distribution: 59%      SingleRFHarmonicMatcher: Transforming distribution: 60%      SingleRFHarmonicMatcher: Transforming distribution: 61%      SingleRFHarmonicMatcher: Transforming distribution: 61%      SingleRFHarmonicMatcher: Transforming distribution: 62%      SingleRFHarmonicMatcher: Transforming distribution: 63%      SingleRFHarmonicMatcher: Transforming distribution: 63%      SingleRFHarmonicMatcher: Transforming distribution: 64%      SingleRFHarmonicMatcher: Transforming distribution: 65%      SingleRFHarmonicMatcher: Transforming distribution: 65%      SingleRFHarmonicMatcher: Transforming distribution: 66%      SingleRFHarmonicMatcher: Transforming distribution: 67%      SingleRFHarmonicMatcher: Transforming distribution: 67%      SingleRFHarmonicMatcher: Transforming distribution: 68%      SingleRFHarmonicMatcher: Transforming distribution: 69%      SingleRFHarmonicMatcher: Transforming distribution: 69%      SingleRFHarmonicMatcher: Transforming distribution: 70%      SingleRFHarmonicMatcher: Transforming distribution: 71%      SingleRFHarmonicMatcher: Transforming distribution: 71%      SingleRFHarmonicMatcher: Transforming distribution: 72%      SingleRFHarmonicMatcher: Transforming distribution: 73%      SingleRFHarmonicMatcher: Transforming distribution: 73%      SingleRFHarmonicMatcher: Transforming distribution: 74%      SingleRFHarmonicMatcher: Transforming distribution: 75%      SingleRFHarmonicMatcher: Transforming distribution: 75%      SingleRFHarmonicMatcher: Transforming distribution: 76%      SingleRFHarmonicMatcher: Transforming distribution: 77%      SingleRFHarmonicMatcher: Transforming distribution: 77%      SingleRFHarmonicMatcher: Transforming distribution: 78%      SingleRFHarmonicMatcher: Transforming distribution: 79%      SingleRFHarmonicMatcher: Transforming distribution: 79%      SingleRFHarmonicMatcher: Transforming distribution: 80%      SingleRFHarmonicMatcher: Transforming distribution: 81%      SingleRFHarmonicMatcher: Transforming distribution: 81%      SingleRFHarmonicMatcher: Transforming distribution: 82%      SingleRFHarmonicMatcher: Transforming distribution: 83%      SingleRFHarmonicMatcher: Transforming distribution: 83%      SingleRFHarmonicMatcher: Transforming distribution: 84%      SingleRFHarmonicMatcher: Transforming distribution: 85%      SingleRFHarmonicMatcher: Transforming distribution: 85%      SingleRFHarmonicMatcher: Transforming distribution: 86%      SingleRFHarmonicMatcher: Transforming distribution: 87%      SingleRFHarmonicMatcher: Transforming distribution: 87%      SingleRFHarmonicMatcher: Transforming distribution: 88%      SingleRFHarmonicMatcher: Transforming distribution: 89%      SingleRFHarmonicMatcher: Transforming distribution: 89%      SingleRFHarmonicMatcher: Transforming distribution: 90%      SingleRFHarmonicMatcher: Transforming distribution: 91%      SingleRFHarmonicMatcher: Transforming distribution: 91%      SingleRFHarmonicMatcher: Transforming distribution: 92%      SingleRFHarmonicMatcher: Transforming distribution: 93%      SingleRFHarmonicMatcher: Transforming distribution: 93%      SingleRFHarmonicMatcher: Transforming distribution: 94%      SingleRFHarmonicMatcher: Transforming distribution: 95%      SingleRFHarmonicMatcher: Transforming distribution: 95%      SingleRFHarmonicMatcher: Transforming distribution: 96%      SingleRFHarmonicMatcher: Transforming distribution: 97%      SingleRFHarmonicMatcher: Transforming distribution: 97%      SingleRFHarmonicMatcher: Transforming distribution: 98%      SingleRFHarmonicMatcher: Transforming distribution: 99%      SingleRFHarmonicMatcher: Transforming distribution: 99%      SingleRFHarmonicMatcher: Done transforming distribution.
    SingleRFHarmonicMatcher: Sampling particles: 161%      SingleRFHarmonicMatcher: Sampled 5000 particles




.. GENERATED FROM PYTHON SOURCE LINES 92-94

We can have a look at the generated particles (see the `xsuite user guide
<https://xsuite.readthedocs.io/en/latest/particlesmanip.html>`_ for more)

.. GENERATED FROM PYTHON SOURCE LINES 94-111

.. code-block:: Python


    fig, (axx, axy, axz) = plt.subplots(3, 1, figsize=(9, 11))

    axx.plot(1e6 * particles.x, 1e5 * particles.px, ".", ms=3)
    axy.plot(1e6 * particles.y, 1e6 * particles.py, ".", ms=3)
    axz.plot(1e3 * particles.zeta, 1e3 * particles.delta, ".", ms=3)

    axx.set_xlabel(r"$x$ [$\mu$m]")
    axx.set_ylabel(r"$p_x$ [$10^{-5}$]")
    axy.set_xlabel(r"$y$ [$\mu$m]")
    axy.set_ylabel(r"$p_y$ [$10^{-3}$]")
    axz.set_xlabel(r"$z$ [$10^{-3}$]")
    axz.set_ylabel(r"$\delta$ [$10^{-3}$]")
    fig.align_ylabels([axx, axy, axz])
    plt.tight_layout()
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_analytical_bjorken_mtingwa_emittances_001.svg
   :alt: demo analytical bjorken mtingwa emittances
   :srcset: /gallery/images/sphx_glr_demo_analytical_bjorken_mtingwa_emittances_001.svg, /gallery/images/sphx_glr_demo_analytical_bjorken_mtingwa_emittances_001_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 112-114

We can compute initial (geometrical) emittances as well as the bunch length
from the `xpart.Particles` object:

.. GENERATED FROM PYTHON SOURCE LINES 114-124

.. code-block:: Python


    sig_x = np.std(particles.x[particles.state > 0])  # horizontal stdev
    sig_y = np.std(particles.y[particles.state > 0])  # vertical stdev
    sig_delta = np.std(particles.delta[particles.state > 0])  # momentum spread

    # Compute horizontal & vertical geometric emittances as well as the bunch length, all in [m]
    geom_epsx = (sig_x**2 - (twiss["dx"][0] * sig_delta) ** 2) / twiss["betx"][0]
    geom_epsy = sig_y**2 / twiss["bety"][0]
    bunch_l = np.std(particles.zeta[particles.state > 0])








.. GENERATED FROM PYTHON SOURCE LINES 125-131

Computing IBS Growth Rates
--------------------------
Let us instantiate the `~.xibs.analytical.BjorkenMtingwaIBS` class. It is fairly
simple and is done from both the beam parameters of the particles and the
optics parameters of the line. For each of these a specific `dataclass`
is provided in the `~.xibs.inputs` module.

.. GENERATED FROM PYTHON SOURCE LINES 131-136

.. code-block:: Python


    beam_params = BeamParameters(particles)
    optics = OpticsParameters(twiss)
    IBS = BjorkenMtingwaIBS(beam_params, optics)








.. GENERATED FROM PYTHON SOURCE LINES 137-143

Just like for NagaitsevIBS, we can ask for the **IBS** growth rates to be computed
with a dedicated function. Notice the class will complain that our provided Twiss
was not computed at the center of elements, but still perform the calculation. At
the moment xtrack does not allow Twissing at the center of elements, but we could
get this from MAD-X. These are returned by the function but also stored and updated
internally each time they are computed.

.. GENERATED FROM PYTHON SOURCE LINES 143-148

.. code-block:: Python


    growth_rates = IBS.growth_rates(geom_epsx, geom_epsy, sig_delta, bunch_l)
    print(growth_rates)
    print(IBS.ibs_growth_rates)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [13:06:35] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    IBSGrowthRates(Tx=5.511955012465871e-05, Ty=-4.50843649882899e-08, Tz=2.6060628109700473e-05)
    IBSGrowthRates(Tx=5.511955012465871e-05, Ty=-4.50843649882899e-08, Tz=2.6060628109700473e-05)




.. GENERATED FROM PYTHON SOURCE LINES 149-154

Computing New Emittances from Growth Rates
------------------------------------------
From these one can compute the emittances at the next time step. For the emittances
at the next turn, once should use :math:`1 / f_{rev}` as the time step, which
is the default value used if it is not provided.

.. GENERATED FROM PYTHON SOURCE LINES 154-163

.. code-block:: Python


    new_geom_epsx, new_geom_epsy, new_sig_delta, new_bunch_length = IBS.emittance_evolution(
        geom_epsx, geom_epsy, sig_delta, bunch_l
    )
    print(f"Next time step geometrical epsilon_x = {new_geom_epsx} m")
    print(f"Next time step geometrical epsilon_y = {new_geom_epsy} m")
    print(f"Next time step sigma_delta = {new_sig_delta}")
    print(f"Next time step bunch length = {new_bunch_length} m")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Next time step geometrical epsilon_x = 4.2346886171829935e-09 m
    Next time step geometrical epsilon_y = 5.112870607380135e-09 m
    Next time step sigma_delta = 0.0003011090194876846
    Next time step bunch length = 0.22955424764811394 m




.. GENERATED FROM PYTHON SOURCE LINES 164-171

Analytical Evolution for a Time Period
--------------------------------------
One can then analytically look at the evolution through time by looping
over this calculation. Let's do this for 5 hours, recomputing the growth rates
every 10 minutes. The more frequent this update the more physically accurate
the results will be, but the longer the simulation as this computation is the most
compute-intensive process.

.. GENERATED FROM PYTHON SOURCE LINES 171-230

.. code-block:: Python


    nsecs = 5 * 3_600  # that's 5h
    ibs_step = 10 * 60  # re-compute rates every 10min
    seconds = np.linspace(0, nsecs, nsecs).astype(int)


    # Set up a dataclass to store the results
    @dataclass
    class Records:
        """Dataclass to store (and update) important values through tracking."""

        epsilon_x: np.ndarray
        epsilon_y: np.ndarray
        sig_delta: np.ndarray
        bunch_length: np.ndarray


    # Initialize the dataclass
    turn_by_turn = Records(
        epsilon_x=np.zeros(nsecs, dtype=float),
        epsilon_y=np.zeros(nsecs, dtype=float),
        sig_delta=np.zeros(nsecs, dtype=float),
        bunch_length=np.zeros(nsecs, dtype=float),
    )

    # Store the initial values
    turn_by_turn.bunch_length[0] = np.std(particles.zeta[particles.state > 0])
    turn_by_turn.sig_delta[0] = sig_delta
    turn_by_turn.epsilon_x[0] = (sig_x**2 - (twiss["dx"][0] * sig_delta) ** 2) / twiss["betx"][0]
    turn_by_turn.epsilon_y[0] = sig_y**2 / twiss["bety"][0]

    # We loop here now
    for sec in range(1, nsecs):
        # ----- Potentially re-compute the IBS growth rates ----- #
        if (sec % ibs_step == 0) or (sec == 1):
            print(f"At {sec}s: re-computing growth rates")
            # We compute from values at the previous turn
            IBS.growth_rates(
                turn_by_turn.epsilon_x[sec - 1],
                turn_by_turn.epsilon_y[sec - 1],
                turn_by_turn.sig_delta[sec - 1],
                turn_by_turn.bunch_length[sec - 1],
            )

        # ----- Compute the new emittances ----- #
        new_emit_x, new_emit_y, new_sig_delta, new_bunch_length = IBS.emittance_evolution(
            epsx=turn_by_turn.epsilon_x[sec - 1],
            epsy=turn_by_turn.epsilon_y[sec - 1],
            sigma_delta=turn_by_turn.sig_delta[sec - 1],
            bunch_length=turn_by_turn.bunch_length[sec - 1],
            dt=1.0,  # get at next second
        )

        # ----- Update the records with the new values ----- #
        turn_by_turn.epsilon_x[sec] = new_emit_x
        turn_by_turn.epsilon_y[sec] = new_emit_y
        turn_by_turn.sig_delta[sec] = new_sig_delta
        turn_by_turn.bunch_length[sec] = new_bunch_length





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    At 1s: re-computing growth rates
    [13:06:36] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 600s: re-computing growth rates
    [13:06:36] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 1200s: re-computing growth rates
    [13:06:37] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 1800s: re-computing growth rates
    [13:06:38] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 2400s: re-computing growth rates
    [13:06:39] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 3000s: re-computing growth rates
    [13:06:40] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 3600s: re-computing growth rates
    [13:06:41] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 4200s: re-computing growth rates
    [13:06:42] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 4800s: re-computing growth rates
    [13:06:43] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 5400s: re-computing growth rates
    [13:06:43] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 6000s: re-computing growth rates
    [13:06:44] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 6600s: re-computing growth rates
    [13:06:45] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 7200s: re-computing growth rates
    [13:06:46] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 7800s: re-computing growth rates
    [13:06:47] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 8400s: re-computing growth rates
    [13:06:48] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 9000s: re-computing growth rates
    [13:06:49] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 9600s: re-computing growth rates
    [13:06:50] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 10200s: re-computing growth rates
    [13:06:51] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 10800s: re-computing growth rates
    [13:06:51] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 11400s: re-computing growth rates
    [13:06:52] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 12000s: re-computing growth rates
    [13:06:53] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 12600s: re-computing growth rates
    [13:06:54] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 13200s: re-computing growth rates
    [13:06:55] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 13800s: re-computing growth rates
    [13:06:56] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 14400s: re-computing growth rates
    [13:06:57] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 15000s: re-computing growth rates
    [13:06:58] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 15600s: re-computing growth rates
    [13:06:58] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 16200s: re-computing growth rates
    [13:06:59] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 16800s: re-computing growth rates
    [13:07:00] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements
    At 17400s: re-computing growth rates
    [13:07:01] [WARNING] - analytical.growth_rates:1322 - Twiss was not calculated at center of elements




.. GENERATED FROM PYTHON SOURCE LINES 231-234

Feel free to run this simulation for longer, or with a different frequency
of the IBS growth rates re-computation. After this is done running, we can plot
the evolutions across the turns:

.. GENERATED FROM PYTHON SOURCE LINES 234-264

.. code-block:: Python


    fig, axs = plt.subplot_mosaic([["epsx", "epsy"], ["sigd", "bl"]], sharex=True, figsize=(13, 7))

    axs["epsx"].plot(seconds / 3600, 1e9 * turn_by_turn.epsilon_x, lw=2)
    axs["epsy"].plot(seconds / 3600, 1e9 * turn_by_turn.epsilon_y, lw=2)
    axs["sigd"].plot(seconds / 3600, 1e4 * turn_by_turn.sig_delta, lw=2)
    axs["bl"].plot(seconds / 3600, 1e2 * turn_by_turn.bunch_length, lw=2)

    # Axes parameters
    axs["epsx"].set_ylabel(r"$\varepsilon_x$ [$10^{-9}$m]")
    axs["epsy"].set_ylabel(r"$\varepsilon_y$ [$10^{-9}$m]")
    axs["sigd"].set_ylabel(r"$\sigma_{\delta}$ [$10^{-4}$]")
    axs["bl"].set_ylabel(r"Bunch length [cm]")

    for axis in (axs["epsy"], axs["bl"]):
        axis.yaxis.set_label_position("right")
        axis.yaxis.tick_right()

    for axis in (axs["sigd"], axs["bl"]):
        axis.set_xlabel("Duration [h]")

    for axis in axs.values():
        axis.yaxis.set_major_locator(plt.MaxNLocator(3))

    fig.align_ylabels((axs["epsx"], axs["sigd"]))
    fig.align_ylabels((axs["epsy"], axs["bl"]))

    plt.tight_layout()
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_demo_analytical_bjorken_mtingwa_emittances_002.svg
   :alt: demo analytical bjorken mtingwa emittances
   :srcset: /gallery/images/sphx_glr_demo_analytical_bjorken_mtingwa_emittances_002.svg, /gallery/images/sphx_glr_demo_analytical_bjorken_mtingwa_emittances_002_2_00x.svg 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 265-272

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `~xibs.analytical`: `~.xibs.analytical.BjorkenMtingwaIBS`, `~.xibs.analytical.BjorkenMtingwaIBS.growth_rates`, `~.xibs.analytical.BjorkenMtingwaIBS.emittance_evolution`
   - `~xibs.inputs`: `~xibs.inputs.BeamParameters`, `~xibs.inputs.OpticsParameters`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 56.808 seconds)


.. _sphx_glr_download_gallery_demo_analytical_bjorken_mtingwa_emittances.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_analytical_bjorken_mtingwa_emittances.ipynb <demo_analytical_bjorken_mtingwa_emittances.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_analytical_bjorken_mtingwa_emittances.py <demo_analytical_bjorken_mtingwa_emittances.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
